openapi: "3.0.0"
info:
  version: 1.0.0
  title: fitnessApp
servers:
  - url: http://127.0.0.1:8080
paths:
  /user:
    post:
      summary: Create user
      tags:
        - User
      requestBody:
        description: Object with user properties
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        201:
          description: Created
          headers:
            X-Total-Count:
              $ref: '#/components/headers/X-Total-Count'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResponse"
  /user/:
    get:
      summary: Get logged user
      tags:
        - User
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              $ref: '#/components/headers/X-Total-Count'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoggedResponse"
  /user/{userId}:
    delete:
      summary: Delete user by id
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          description: User id
          schema:
            $ref: "#/components/schemas/Identifier"
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              $ref: '#/components/headers/X-Total-Count'
  /login:
    post:
      summary: Request for login
      tags:
        - Login
      requestBody:
        description: Object with username and password
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              $ref: '#/components/headers/X-Total-Count'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
  /role:
    post:
      summary: Create role
      tags:
        - Role
      requestBody:
        description: Object with role properties
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RoleCreateRequest"
      responses:
        201:
          description: Created
          headers:
            X-Total-Count:
              $ref: '#/components/headers/X-Total-Count'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleCreateResponse"
  /roles:
      get:
        summary: Get roles
        tags:
          - Role
        responses:
          200:
            description: OK
            headers:
              X-Total-Count:
                $ref: '#/components/headers/X-Total-Count'
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/RoleCreateResponse"
  /role/{roleId}:
      delete:
        summary: Delete role by id
        tags:
          - Role
        parameters:
          - name: roleId
            in: path
            required: true
            description: Role id
            schema:
              $ref: "#/components/schemas/Identifier"
        responses:
          200:
            description: OK
            headers:
              X-Total-Count:
                $ref: '#/components/headers/X-Total-Count'
components:
  headers:
    X-Total-Count:
      schema:
        type: integer
        description: Total number of entities
  schemas:
    Identifier:
      type: integer
      minimum: 1
      example: 1
      description: A unique 4 bytes unsigned integer identifier
    CreatedAt:
      type: string
      format: date-time
      example: "2020-01-28T15:10:28Z"
    UserCreateRequest:
      properties:
        username:
          type: string
          example: Jack
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: zaq12wsx
    UserCreateResponse:
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: zaq12wsx
        createdAt:
          $ref: "#/components/schemas/CreatedAt"
    RoleCreateRequest:
      properties:
        name:
          type: string
          example: User
        rights:
          type: string
          example: all
    RoleCreateResponse:
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
          example: User
        rights:
          type: string
          example: all
    UserLoggedResponse:
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: zaq12wsx
        createdAt:
          $ref: "#/components/schemas/CreatedAt"
    Login:
      properties:
        username:
          type: string
          example: Jacek
        password:
          type: string
          example: zaq12wsx
    Token:
      properties:
        token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...